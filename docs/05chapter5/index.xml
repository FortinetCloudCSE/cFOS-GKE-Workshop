<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter 5 - cFOS Installation on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5.html</link><description>Recent content in Chapter 5 - cFOS Installation on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/UserRepo/05chapter5/index.xml" rel="self" type="application/rss+xml"/><item><title>Task 1 - Create Role and Service Account for cFOS</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/2_task1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/2_task1.html</guid><description>Create Role and Service Account for cFOS cFOS will require to read configmap permission to get license and also cFOS will require read-secrets permission to get secret to pull cFOS image
Below command will create application deployment
file=&amp;#34;cfos_account.yml&amp;#34; cat &amp;lt;&amp;lt; EOF &amp;gt; $file --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: namespace: default name: configmap-reader rules: - apiGroups: [&amp;#34;&amp;#34;] resources: [&amp;#34;configmaps&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;watch&amp;#34;, &amp;#34;list&amp;#34;] --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: read-configmaps namespace: default subjects: - kind: ServiceAccount name: default apiGroup: &amp;#34;&amp;#34; roleRef: kind: ClusterRole name: configmap-reader apiGroup: &amp;#34;&amp;#34; --- apiVersion: rbac.</description></item><item><title>Task 2 - Validate Role and Service Account for cFOS</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/3_task2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/3_task2.html</guid><description>Validate Role and Service Account for cFOS Validate Role and Service Account for cFOS
``` kubectl get rolebinding read-configmaps &amp;amp;&amp;amp; kubectl get rolebinding read-secrets -o yaml ``` &amp;gt; output will be similar as below ``` NAME ROLE AGE read-configmaps ClusterRole/configmap-reader 0s apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: creationTimestamp: &amp;quot;2023-05-18T07:42:04Z&amp;quot; name: read-secrets namespace: default resourceVersion: &amp;quot;2972&amp;quot; uid: b70f038e-b9ec-4440-bebe-5ea0ed06f7c8 roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: secrets-reader subjects: - kind: ServiceAccount name: default</description></item><item><title>Task 3 - Create &amp; Validate cFOS role and service account</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/4_task3.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/4_task3.html</guid><description>Create &amp;amp; Validate cFOS role and service account We will create cFOS as DaemonSet, so each node will have single cFOS POD. cFOS will be attached to net-attach-def CRD which was created earlier. cFOS is configured as a ClusterIP service for restapi port. cFOS will use annotation to attach to net-attach-def CRD cfosdefaultcni5. k8s.v1.cni.cncf.io/networks means secondary network. Default interface inside cFOS is net1. cFOS will have fixed IP 10.1.200.252/32 which is the range of CRD cni configuration.</description></item><item><title>Task 4 - Validate routing table and ip address</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/5_task4.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/5_task4.html</guid><description>Validate routing table and ip address nodeName=$(kubectl get nodes -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) &amp;amp;&amp;amp; for node in $nodeName; do podName=$(kubectl get pods -l app=fos --field-selector spec.nodeName=&amp;#34;$node&amp;#34; -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) ; kubectl exec -it po/$podName -- ip route &amp;amp;&amp;amp; kubectl exec -t po/$podName -- ip address ; done output will be similar as below
default via 10.140.1.1 dev eth0 10.1.200.0/24 dev net1 proto kernel scope link src 10.1.200.252 10.140.1.0/24 via 10.140.1.1 dev eth0 src 10.</description></item><item><title>Task 5 - Validate cFOS license</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/6_task5.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/6_task5.html</guid><description>Validate cFOS license nodeName=$(kubectl get nodes -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) &amp;amp;&amp;amp; for node in $nodeName; do podName=$(kubectl get pods -l app=fos --field-selector spec.nodeName=&amp;#34;$node&amp;#34; -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) ; kubectl exec -it po/$podName -- ip route &amp;amp;&amp;amp; kubectl exec -t po/$podName -- ip address ; done output will be similar as below
System is starting... Firmware version is 7.2.0.0231 Preparing environment... INFO: 2023/05/18 07:42:15 importing license... INFO: 2023/05/18 07:42:15 license is imported successfuly! WARNING: System is running in restricted mode due to lack of valid license!</description></item><item><title>Task 6 - Create configmap for cFOS to get firewall policy configuration</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/7_task6.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/7_task6.html</guid><description>Create configmap for cFOS to get firewall policy configuration cFOS can be configured use cFOS shell, kubernetes configmap and restApi. here we use configmap to config cFOS there is an issue in this version, the configuration applied via configmap will not take effect until you restart cFOS DS. the firewall policy has policy id set to 300 and source address set to any. once configmap created, cFOS will read the configmap and apply the policy.</description></item><item><title>Task 7 - Validate cFOS log for retriving config from configmap</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/8_task7.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/8_task7.html</guid><description>Validate cFOS log for retriving config from configmap nodeName=$(kubectl get nodes -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) &amp;amp;&amp;amp; for node in $nodeName; do podName=$(kubectl get pods -l app=fos --field-selector spec.nodeName=&amp;#34;$node&amp;#34; -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) ; kubectl logs po/$podName ; done output will be similar as below
System is starting... Firmware version is 7.2.0.0231 Preparing environment... INFO: 2023/05/18 07:42:15 importing license... INFO: 2023/05/18 07:42:15 license is imported successfuly! WARNING: System is running in restricted mode due to lack of valid license!</description></item><item><title>Task 8 - Restart cFOS DaemonSet</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/9_task8.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/9_task8.html</guid><description>Restart cFOS DaemonSet to workaround if there is any issue with policy when use configmap to apply firewallpolicy to cFOS, if it&amp;rsquo;s the first time to config cFOS using firewall policy, then a restart cFOS is required. alternatively, you can shell into cFOS then run fcnsh to enter cFOS shell and remove config and added back as a workaroud.
Below command will restart cFOS DaemonSet
[[ $ping_dst == &amp;#34;&amp;#34; ]] &amp;amp;&amp;amp; ping_dst=&amp;#34;1.</description></item><item><title>Task 9 - Validate deployment status of cFOS</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/10_task9.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/10_task9.html</guid><description>Validate deployment status of cFOS after the restart kubectl rollout status ds/fos-deployment output will be similar as below
daemon set &amp;#34;fos-deployment&amp;#34; successfully rolled out</description></item><item><title>Task 10 - Validate routing table and ip address of cFOS</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/11_task10.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/11_task10.html</guid><description>Validate routing table and ip address of cFOS nodeName=$(kubectl get nodes -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) &amp;amp;&amp;amp; for node in $nodeName; do podName=$(kubectl get pods -l app=fos --field-selector spec.nodeName=&amp;#34;$node&amp;#34; -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) ; echo $podName ; kubectl exec -it po/$podName -- iptables -L -t nat --verbose | grep MASQ ; done output will be similar as below
fos-deployment-cqvr5n 29 2416 MASQUERADE all -- any eth0 anywhere anywhere fos-deployment-cvkstn 29 2416 MASQUERADE all -- any eth0 anywhere anywhere</description></item><item><title>Task 11 - Check ping result</title><link>https://fortinetcloudcse.github.io/UserRepo/05chapter5/12_task11.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/05chapter5/12_task11.html</guid><description>Check ping result kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do echo pod $line; kubectl exec -t po/$line -- ping -c1 1.1.1.1 ; done output will be similar as below
pod multitool01-deployment-7f5bf4b7cd-46vv4 PING 1.1.1.1 (1.1.1.1) 56(84) bytes of data. 64 bytes from 1.1.1.1: icmp_seq=1 ttl=60 time=3.79 ms --- 1.1.1.1 ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 3.</description></item></channel></rss>