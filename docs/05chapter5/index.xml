<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter 5 - cFOS Installation on Fortinet cFOS on GKE in Google Cloud</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5.html</link><description>Recent content in Chapter 5 - cFOS Installation on Fortinet cFOS on GKE in Google Cloud</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/index.xml" rel="self" type="application/rss+xml"/><item><title>Task 1 - Apply license for cFOS</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/2_task1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/2_task1.html</guid><description>Create and apply license for cFOS Create cFOS license with FortiGate VM license and generate configmap for cFOS to fetch license. One can upload FortiGate VM license to gcloud shell via gcloud SHELL Terminal &amp;ldquo;upload&amp;rdquo; feature.
Upload your FortiGate VM license to the directory where you run your script.
export cfos_license_input_file=&amp;ldquo;path_to_your_license&amp;rdquo; to setup the environment variable for license. export cfos_license_input_file=&amp;#34;path_to_your_license&amp;#34; After exporting the variable, run below command which will apply the license Below command will create application deployment</description></item><item><title>Task 2 - Create Role and Service Account for cFOS</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/3_task2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/3_task2.html</guid><description>Create &amp;amp; Validate Role and Service Account for cFOS cFOS will require to read configmap permission to get license and also cFOS will require read-secrets permission to get secret to pull cFOS image. Below command will create cFOS Role and Service Account
file=&amp;#34;cfos_account.yml&amp;#34; cat &amp;lt;&amp;lt; EOF &amp;gt; $file --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: namespace: default name: configmap-reader rules: - apiGroups: [&amp;#34;&amp;#34;] resources: [&amp;#34;configmaps&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;watch&amp;#34;, &amp;#34;list&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Task 3 - Create cFOS DaemonSet</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/4_task3.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/4_task3.html</guid><description>Create &amp;amp; Validate cFOS DaemonSet Create cFOS as DaemonSet, so each node will have single cFOS POD.
cFOS will be attached to net-attach-def CRD which was created earlier.
cFOS is configured as a ClusterIP service for restapi port.
cFOS will use annotation to attach to net-attach-def CRD cfosdefaultcni5.
k8s.v1.cni.cncf.io/networks means secondary network.
Default interface inside cFOS is net1.
cFOS will have fixed IP 10.1.200.252/32 which is the range of CRD cni configuration.</description></item><item><title>Task 4 - Check Routing Table and IP Address</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/5_task4.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/5_task4.html</guid><description>Check Routing Table and IP Address nodeName=$(kubectl get nodes -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) &amp;amp;&amp;amp; for node in $nodeName; do podName=$(kubectl get pods -l app=fos --field-selector spec.nodeName=&amp;#34;$node&amp;#34; -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) ; kubectl exec -it po/$podName -- ip route &amp;amp;&amp;amp; kubectl exec -t po/$podName -- ip address ; done output will be similar as below</description></item><item><title>Task 5 - Validate cFOS license</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/6_task5.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/6_task5.html</guid><description>Validate cFOS license nodeName=$(kubectl get nodes -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) &amp;amp;&amp;amp; for node in $nodeName; do podName=$(kubectl get pods -l app=fos --field-selector spec.nodeName=&amp;#34;$node&amp;#34; -o jsonpath=&amp;#39;{.items[*].metadata.name}&amp;#39;) ; kubectl logs po/$podName ; done output will be similar as below</description></item><item><title>Task 6 - Create configmap for cFOS</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/7_task6.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/7_task6.html</guid><description>Create configmap for cFOS to configure firewall policy cFOS can be configured to use cFOS shell, kubernetes configmap and restApi. here we use configmap to config cFOS there is an issue in this version, the configuration applied via configmap will not take effect until you restart cFOS DS. the firewall policy has policy id set to 300 and source address set to any. once configmap created, cFOS will read the configmap and apply the policy.</description></item><item><title>Task 7 - Restart cFOS DaemonSet</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/8_task7.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/8_task7.html</guid><description>Restart &amp;amp; Validate cFOS DaemonSet Info Currently, there is an issue with configmap while configuring cFOS, due to which, once configuration is applied via configmap, cFOS DS need to be restarted to take the configuration into effect.
Alternatively, one can shell into cFOS by executing *fcnsh*. Then remove config and add it back as a workaroud. Below command will restart cFOS DaemonSet
kubectl rollout status ds/fos-deployment &amp;amp;&amp;amp; kubectl rollout restart ds/fos-deployment &amp;amp;&amp;amp; kubectl rollout status ds/fos-deployment podname=$(kubectl get pod -l app=fos | grep Running | grep fos | cut -d &amp;#34; &amp;#34; -f 1) echo &amp;#39;check cfos iptables for snat entry&amp;#39; &amp;amp;&amp;amp; kubectl exec -it po/$podname -- iptables -L -t nat --verbose | grep MASQ echo &amp;#34;check whether application pod can reach &amp;#34; echo &amp;#34;check deployment multi&amp;#34; echo sleep 30 sleep 30 kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print }&amp;#39; | while read line; do echo pod $line; kubectl exec -t po/$line -- ping -c1 1.</description></item><item><title>Task 8 - Check ping result</title><link>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/9_task8.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/cFOS-GKE-Workshop/05chapter5/9_task8.html</guid><description>Check ping result kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do echo pod $line; kubectl exec -t po/$line -- ping -c1 1.1.1.1 ; done output will be similar as below</description></item></channel></rss>