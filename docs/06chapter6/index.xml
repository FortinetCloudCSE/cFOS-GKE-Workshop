<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chapter 6 - Validate Security features on Hugo for Fortinet TECWorkshops</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6.html</link><description>Recent content in Chapter 6 - Validate Security features on Hugo for Fortinet TECWorkshops</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://fortinetcloudcse.github.io/UserRepo/06chapter6/index.xml" rel="self" type="application/rss+xml"/><item><title>Task 1 - Perform IPS test on a target website</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/2_task1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/2_task1.html</guid><description>Perform initial IPS test on a target website it is very common that a malicous POD can geneate some malicous traffic targeting external network or VM or physical machine in custmer network. those traffic are often encrypted , when these traffic reach cFOS, cFOS can decrpyt the traffic and look into the IPS signature. if match the signature. cFOS can either block it or pass it with alert depends on the policy configured.</description></item><item><title>Task 2 - Perform Web Filter test on a target website</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/3_task2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/3_task2.html</guid><description>Perform initial Web Filter test on a target website it is very common that a malicous POD can geneate some malicous traffic targeting external network or VM or physical machine in custmer network. those traffic are often encrypted , when these traffic reach cFOS, cFOS can decrpyt the traffic and look into the domain name of target website. it the target website belong to category that suppose to be blocked, cFOS will block it.</description></item><item><title>Task 3 - Delete firewall policy using cFOS API</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/4_task3.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/4_task3.html</guid><description>Delete firewall policy using cFOS Rest API we can use cFOS shell to change firewall policy, we can also use cFOS restAPI to do the same. after delete firewall policy, ping to 1.1.1.1 from application pod will no longer reachable
Below command will delete firewall policy
[[ -z $cfos_label ]] &amp;amp;&amp;amp; cfos_label=&amp;#34;fos&amp;#34; [[ -z $configmap_policy_id ]] &amp;amp;&amp;amp; configmap_policy_id=&amp;#34;300&amp;#34; nodeList=$(kubectl get pod -l app=$cfos_label -o jsonpath=&amp;#39;{.items[*].status.podIP}&amp;#39;) kubectl delete cm foscfgfirewallpolicy echo $nodeList for i in $nodeList; do { kubectl exec -it po/policymanager -- curl -X DELETE &amp;#34;$i/api/v2/cmdb/firewall/policy/$configmap_policy_id&amp;#34; } done Validate the result kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do echo -e pod $line; kubectl exec -t po/$line -- ping -c1 1.</description></item><item><title>Task 4 - Create an POD to update POD source IP to cFOS</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/5_task4.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/5_task4.html</guid><description>Create an POD to update POD source IP to cFOS POD IPs are keep changing due to scale in/out or reborn , deleting etc for various reason, we need to keep update the POD ip address to cFOS address group. we create a POD dedicated for this. this POD keep running a background proces which update the application POD&amp;rsquo;s IP that has annoation to net-attach-def cfosapp&amp;quot; to cFOS via cFOS restful API.</description></item><item><title>Task 5 - Perform IPS test again on a target website</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/6_task5.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/6_task5.html</guid><description>Perform IPS test again on a target website we do ips test again, this time, the policy created by policymanager will take the action. we can chech the ips log to prove it. the traffic shall match different policy ID which is 101
Below command will send malicous traffic from application pod
#!/bin/bash [[ $ips_target_url == &amp;#34;&amp;#34; ]] &amp;amp;&amp;amp; ips_target_url=&amp;#34;www.hackthebox.eu&amp;#34; [[ -z $cfos_label ]] &amp;amp;&amp;amp; cfos_label=&amp;#34;fos&amp;#34; policy_id=&amp;#34;101&amp;#34; echo -e &amp;#39;generate traffic to $ips_target_url&amp;#39; kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- dig $ips_target_url ; done &amp;amp;&amp;amp; \ kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- ping -c 2 $ips_target_url ; done &amp;amp;&amp;amp; \ kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- curl --max-time 5 -k -H &amp;#34;User-Agent: () { :; }; /bin/ls&amp;#34; https://$ips_target_url ; done kubectl get pod | grep $cfos_label | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- tail /data/var/log/log/ips.</description></item><item><title>Task 6 - Perform Web Filter test again on a target website</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/7_task6.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/7_task6.html</guid><description>Perform Web Filter test again on a target website it is very common that a malicous POD can geneate some malicous traffic targeting external network or VM or physical machine in custmer network. those traffic are often encrypted , when these traffic reach cFOS, cFOS can decrpyt the traffic and look into the domain name of target website. it the target website belong to category that suppose to be blocked, cFOS will block it.</description></item><item><title>Task 7 - Modify Worker Node default CNI</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/8_task7.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/8_task7.html</guid><description>Modify Worker Node default CNI Config in previous section, we did not touch application POD&amp;rsquo;s default route, only we interested destination like 1.1.1.1 is send to cFOS, the rest of traffic will contine go to internet via default route, what about if want send all traffic from application POD to cFOS ,to doing this, we will need then insert a default route into application pod, for this purpose, we will need use add annotation with keyword default-route to the POD definition.</description></item><item><title>Task 8 - Delete application deployment</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/9_task8.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/9_task8.html</guid><description>Delete current application deployment Below command will delete current application deployment
kubectl get deployment multitool01-deployment &amp;amp;&amp;amp; kubectl delete deployment multitool01-deployment</description></item><item><title>Task 9 - Create application deployment</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/10_task9.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/10_task9.html</guid><description>Create application deployment create deployment with annotation to use net-attach-def and also config default route point to net-attach-def attached interface. which is cFOS interface. the annotation field has context k8s.v1.cni.cncf.io/networks: &amp;lsquo;[ { &amp;ldquo;name&amp;rdquo;: &amp;ldquo;cfosapp&amp;rdquo;, &amp;ldquo;default-route&amp;rdquo;: [&amp;ldquo;10.1.200.252&amp;rdquo;] } ]&amp;rsquo; , which config an default route with nexthop to 10.1.200.252. check ip route table on application shall see the default route point to cFOS interface.
Below command to create deployment
file=&amp;#34;app_with_annotations_cfosapp_with_defalt_route.yml&amp;#34; [[ $cfosIpshort == &amp;#34;&amp;#34; ]] &amp;amp;&amp;amp; cfosIpshort=&amp;#34;10.</description></item><item><title>Task 10 - Perform Web Filter test for 3rd time on a target website</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/11_task10.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/11_task10.html</guid><description>Perform Web Filter test for 3rd time on a target website this time we ,use destination that not on match default route, for example https://xoso.com.vn this website will be classified by cFOS as Gambling that shall be blocked by default profile.
Below command will provide access to the target website
#!/bin/bash [[ $internet_webf_url == &amp;#34;&amp;#34; ]] &amp;amp;&amp;amp; internet_webf_url=&amp;#34;https://xoso.com.vn&amp;#34; [[ -z $cfos_label ]] &amp;amp;&amp;amp; cfos_label=&amp;#34;fos&amp;#34; policy_id=&amp;#34;101&amp;#34; kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- curl -k -I $internet_webf_url ; done kubectl get pod | grep $cfos_label | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- tail /data/var/log/log/webf.</description></item><item><title>Task 11 - Install gatekeeperv3</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/12_task11.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/12_task11.html</guid><description>cFOS REST API to delete firewall policy in this template, include a session call targets. in the targets it use rego as policy engine language to parse the policy . we use repo function http.send to send API to cFOS. you only need deploy template once.
Below command will install gatekeeper constraint template
filename=&amp;#34;47_constraint_template.yml&amp;#34; cat &amp;lt;&amp;lt; EOF &amp;gt; $filename apiVersion: templates.gatekeeper.sh/v1beta1 kind: ConstraintTemplate metadata: name: k8segressnetworkpolicytocfosutmpolicy spec: crd: spec: names: kind: K8sEgressNetworkPolicyToCfosUtmPolicy validation: openAPIV3Schema: properties: message: type: string podcidr: type: string cfosegressfirewallpolicy: type: string outgoingport: type: string utmstatus: type: string ipsprofile: type: string avprofile: type: string sslsshprofile: type: string action: type: string srcintf: type: string firewalladdressapiurl: type: string firewallpolicyapiurl: type: string policyid : type: string extraservice: type: string targets: - target: admission.</description></item><item><title>Task 12 - cFOS REST API to delete firewall policy</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/13_task12.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/13_task12.html</guid><description>Install gatekeeperv3 constraint template the policy created by policy_manager pod has policy id 101, let us delete this firewall policy use cfosrestapi. after delete firewall policy, we use crl to check whether any firewall policy left on cFOS POD.
Below command will delete firewall policy
[[ -z $1 ]] &amp;amp;&amp;amp; policy_id=&amp;#34;101&amp;#34; policy_id=$1 [[ -z $cfos_label ]] &amp;amp;&amp;amp; cfos_label=&amp;#34;fos&amp;#34; #url=&amp;#34;http://$cfos_label-deployment.default.svc.cluster.local&amp;#34; nodeList=$(kubectl get pod -l app=$cfos_label -o jsonpath=&amp;#39;{.items[*].status.podIP}&amp;#39;) #kubectl delete cm foscfgfirewallpolicy echo $nodeList for i in $nodeList; do { kubectl exec -it po/policymanager -- curl -X DELETE &amp;#34;$i/api/v2/cmdb/firewall/policy/$policy_id&amp;#34; } done Validate the result kubectl exec -it po/policymanager -- curl -X GET http://fos-deployment.</description></item><item><title>Task 13 - Deploy Network Policy</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/14_task13.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/14_task13.html</guid><description>Deploy &amp;amp; Validate Network Policy here we create standard k8s egress networkpolicy, this policy will be created on cFOS with gatekeeper help. after creating. use &amp;ldquo;kubectl get networkpolicy will not show you the policy&amp;rdquo; as it actually created on cFOS. instead , you can get policy by use cFOS API with command kubectl exec -it po/policymanager &amp;ndash; curl -X GET http://fos-deployment.default.svc.cluster.local/api/v2/cmdb/firewall/policy
Below command will deploy networkpolicy
[[ -z $cfos_label ]] &amp;amp;&amp;amp; cfos_label=&amp;#34;fos&amp;#34; [[ -z $gatekeeper_policy_id ]] &amp;amp;&amp;amp; gatekeeper_policy_id=&amp;#34;200&amp;#34; filename=&amp;#34;49_network_firewallpolicy_egress.</description></item><item><title>Task 14 - Perform IPS test</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/15_task14.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/15_task14.html</guid><description>Perform IPS test for 3rd time on a target website we do ips test again, this time, the policy created by policymanager will take the action. we can chech the ips log to prove it. the traffic shall match different policy ID which is 200
Below command will send malicous traffic from application pod
#!/bin/bash [[ $ips_target_url == &amp;#34;&amp;#34; ]] &amp;amp;&amp;amp; ips_target_url=&amp;#34;www.hackthebox.eu&amp;#34; [[ -z $gatekeeper_policy_id ]] &amp;amp;&amp;amp; gatekeeper_policy_id=&amp;#34;200&amp;#34; [[ -z $cfos_label ]] &amp;amp;&amp;amp; cfos_label=&amp;#34;fos&amp;#34; echo -e &amp;#39;generate traffic to $ips_target_url&amp;#39; kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- dig $ips_target_url ; done &amp;amp;&amp;amp; \ kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- ping -c 2 $ips_target_url ; done &amp;amp;&amp;amp; \ kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- curl --max-time 5 -k -H &amp;#34;User-Agent: () { :; }; /bin/ls&amp;#34; https://$ips_target_url ; done kubectl get pod | grep $cfos_label | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- tail /data/var/log/log/ips.</description></item><item><title>Task 15 - Install &amp; Validate gatekeeperv3</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/16_task15.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/16_task15.html</guid><description>Install &amp;amp; Validate gatekeeperv3 We will use standard k8s networkpolicy to create firewallpolicy for cFOS, the networkpolicy submitted by kubectl will first be send to gatekeeper admission controller. where there is a constraint delpoyed to inspect the policy constraint via constraint template. if the networkpolicy pass the constrait check. the constraint template will use cFOS Restapi to create firewall policy. and then the constraint template will give output telling the networkpolicy creation is forbiden instead it created on CFOS.</description></item><item><title>Task 16 - Install Policy Constraint</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/17_task16.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/17_task16.html</guid><description>Install &amp;amp; Validate Policy Constraint the policy constraint define what API to watch, for example, here we wathc NetworkPolicy API, also it function as parameter input to constraint template. here for example, user pass in policy id=200 for constraint template. we also pass in cFOS restAPI URL etc., beaware that here we are using dns name of clusterIP for cFOS API, if we are not using shared storage for cFOS /data folder, we need run API call multiple times to make sure it config each of cFOS POD.</description></item><item><title>Task 17 - Re-start application deployment</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/18_task17.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/18_task17.html</guid><description>Re-start application deployment to trigger policymanager update addressgrp in cFOS due to limitation of policymanager, it require pod ip change to trigger update addressgrp in cFOS, we can restar application pod, scale in, scale out etc to force pod IP change.
you can use &amp;ldquo;kubectl logs -f po/policymanager&amp;rdquo; to check the log of policymanager
Below command to restart appliation DaemonSet
kubectl rollout restart deployment multitool01-deployment &amp;amp;&amp;amp; kubectl rollout status deployment multitool01-deployment echo &amp;#34;sleep 30 seconds for it will take some time to trigger policymanager to update cfos addressgrp&amp;#34; sleep 30 Check status kubectl rollout status deployment multitool01-deployment output will be similar as below</description></item><item><title>Task 18 - Perform Web Filter test</title><link>https://fortinetcloudcse.github.io/UserRepo/06chapter6/19_task18.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fortinetcloudcse.github.io/UserRepo/06chapter6/19_task18.html</guid><description>Perform Web Filter test for 4th time on a target website Below command will provide access to the target website
[[ -z $cfos_label ]] &amp;amp;&amp;amp; cfos_label=&amp;#34;fos&amp;#34; [[ -z $gatekeeper_policy_id ]] &amp;amp;&amp;amp; gatekeeper_policy_id=&amp;#34;200&amp;#34; url=&amp;#34;https://www.eicar.org/download/eicar.com.txt&amp;#34; kubectl get pod | grep multi | grep -v termin | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- curl -k -I $url ; done kubectl get pod | grep $cfos_label | awk &amp;#39;{print $1}&amp;#39; | while read line; do kubectl exec -t po/$line -- tail /data/var/log/log/webf.</description></item></channel></rss>